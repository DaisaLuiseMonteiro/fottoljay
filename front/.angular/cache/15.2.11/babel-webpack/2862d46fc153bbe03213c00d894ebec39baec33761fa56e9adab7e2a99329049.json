{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:3000/api/auth';\n    this.TOKEN_KEY = 'auth_token';\n  }\n  getHeaders() {\n    const token = this.getToken();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      ...(token && {\n        Authorization: `Bearer ${token}`\n      })\n    });\n  }\n  getToken() {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n  setToken(token) {\n    localStorage.setItem(this.TOKEN_KEY, token);\n  }\n  register(userData) {\n    return this.http.post(`${this.API_URL}/register`, userData, {\n      headers: this.getHeaders()\n    });\n  }\n  login(email, password) {\n    return this.http.post(`${this.API_URL}/login`, {\n      email,\n      password\n    }, {\n      headers: this.getHeaders()\n    }).pipe(tap(response => {\n      if (response.token) {\n        this.setToken(response.token);\n      }\n    }));\n  }\n  logout() {\n    return this.http.post(`${this.API_URL}/logout`, {}, {\n      headers: this.getHeaders()\n    }).pipe(tap(() => {\n      localStorage.removeItem(this.TOKEN_KEY);\n    }));\n  }\n  getCurrentUser() {\n    return this.http.get(`${this.API_URL}/me`, {\n      headers: this.getHeaders()\n    });\n  }\n  changePassword(data) {\n    return this.http.put(`${this.API_URL}/change-password`, data, {\n      headers: this.getHeaders()\n    });\n  }\n  initialChangePassword(data) {\n    return this.http.put(`${this.API_URL}/initial-change-password`, data, {\n      headers: this.getHeaders()\n    });\n  }\n  completeFirstLogin(data) {\n    return this.http.post(`${this.API_URL}/complete-first-login`, data, {\n      headers: this.getHeaders()\n    });\n  }\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","tap","UserService","constructor","http","getHeaders","token","getToken","Authorization","localStorage","getItem","TOKEN_KEY","setToken","setItem","register","userData","post","API_URL","headers","login","email","password","pipe","response","logout","removeItem","getCurrentUser","get","changePassword","data","put","initialChangePassword","completeFirstLogin","isLoggedIn","factory","providedIn"],"sourceRoot":"","sources":["/home/daisa-luise-monteiro/Documents/fotoljay/front/src/app/services/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private readonly API_URL = 'http://localhost:3000/api/auth';\n  private readonly TOKEN_KEY = 'auth_token';\n\n  constructor(private http: HttpClient) {}\n\n  private getHeaders(): HttpHeaders {\n    const token = this.getToken();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      ...(token && { Authorization: `Bearer ${token}` })\n    });\n  }\n\n  private getToken(): string | null {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n\n  private setToken(token: string): void {\n    localStorage.setItem(this.TOKEN_KEY, token);\n  }\n\n  register(userData: {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    phone?: string;\n    whatsappLink?: string;\n    city?: string;\n  }): Observable<any> {\n    return this.http.post(`${this.API_URL}/register`, userData, { headers: this.getHeaders() });\n  }\n\n  login(email: string, password: string): Observable<any> {\n    return this.http.post(`${this.API_URL}/login`, { email, password }, { headers: this.getHeaders() })\n      .pipe(\n        tap((response: any) => {\n          if (response.token) {\n            this.setToken(response.token);\n          }\n        })\n      );\n  }\n\n  logout(): Observable<any> {\n    return this.http.post(`${this.API_URL}/logout`, {}, { headers: this.getHeaders() })\n      .pipe(\n        tap(() => {\n          localStorage.removeItem(this.TOKEN_KEY);\n        })\n      );\n  }\n\n  getCurrentUser(): Observable<any> {\n    return this.http.get(`${this.API_URL}/me`, { headers: this.getHeaders() });\n  }\n\n  changePassword(data: { currentPassword: string; newPassword: string }): Observable<any> {\n    return this.http.put(`${this.API_URL}/change-password`, data, { headers: this.getHeaders() });\n  }\n\n  initialChangePassword(data: { email: string; newPassword: string }): Observable<any> {\n    return this.http.put(`${this.API_URL}/initial-change-password`, data, { headers: this.getHeaders() });\n  }\n\n  completeFirstLogin(data: { firstName: string; lastName: string; newPassword: string }): Observable<any> {\n    return this.http.post(`${this.API_URL}/complete-first-login`, data, { headers: this.getHeaders() });\n  }\n\n  isLoggedIn(): boolean {\n    return !!this.getToken();\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}